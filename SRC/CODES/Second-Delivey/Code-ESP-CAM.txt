#include "esp_camera.h"
#include "Arduino.h"

// Definir pines de la cámara
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

// Configuración de la cámara
bool setupCamera() {
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_RGB565;
  config.frame_size = FRAMESIZE_240X240;  // Resolución de 240x240 píxeles
  config.fb_count = 1;

  // Inicializar cámara
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x\n", err);
    return false;
  }

  // Obtener y ajustar la configuración del sensor de la cámara
  sensor_t *s = esp_camera_sensor_get();
  if (s) {
    s->set_saturation(s, 10); // Aumentar saturación al máximo
  }
  
  return true;
}

// Función para calcular los promedios de color y determinar el tipo de píxel
void processAndPrintPixels(camera_fb_t *fb) {
  if (!fb) {
    Serial.println("Camera capture failed");
    return;
  }

  uint16_t image = (uint16_t)fb->buf;
  int width = fb->width;
  int height = fb->height;

  for (int y = 0; y < height; y++) {
    for (int x = 0; x < width; x++) {
      uint16_t pixel = image[y * width + x];
      
      // Extraer componentes RGB565
      float r = ((pixel >> 11) & 0x1F) / 31.0;
      float g = ((pixel >> 5) & 0x3F) / 63.0;
      float b = (pixel & 0x1F) / 31.0;

      // Determinar y imprimir el tipo de píxel
        Serial.print(r);

      if ((x + 1) % width == 0) {
        Serial.println(); // Nueva línea al final de cada fila de píxeles
      }
    }
  }

  esp_camera_fb_return(fb);
}

void setup() {
  Serial.begin(115200);

  if (!setupCamera()) {
    Serial.println("Camera setup failed!");
    return;
  }
}

void loop() {
  camera_fb_t *fb = esp_camera_fb_get();
  processAndPrintPixels(fb);
  delay(5000);  // Esperar antes de la siguiente captura
}
